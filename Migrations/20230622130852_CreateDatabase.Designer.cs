// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewCard.Data;

#nullable disable

namespace NewCard.Migrations
{
    [DbContext(typeof(NewCardContext))]
    [Migration("20230622130852_CreateDatabase")]
    partial class CreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NewCard.Models.Consulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataConsulta")
                        .HasColumnType("date")
                        .HasColumnName("data_consulta");

                    b.Property<TimeSpan?>("HoraConsulta")
                        .HasColumnType("time")
                        .HasColumnName("hora_consulta");

                    b.Property<int?>("MedicoId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicoId1")
                        .HasColumnType("int");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int?>("PacienteId1")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.HasIndex("MedicoId1");

                    b.HasIndex("PacienteId");

                    b.HasIndex("PacienteId1");

                    b.ToTable("Consulta", (string)null);
                });

            modelBuilder.Entity("NewCard.Models.Especialidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.ToTable("Especialidade", (string)null);
                });

            modelBuilder.Entity("NewCard.Models.Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("NewCard.Models.HistoricoConsulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataConsulta")
                        .HasColumnType("date")
                        .HasColumnName("data_consulta");

                    b.Property<string>("Diagnostico")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("diagnostico");

                    b.Property<TimeSpan?>("HoraConsulta")
                        .HasColumnType("time")
                        .HasColumnName("hora_consulta");

                    b.Property<int?>("MedicoId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicoId1")
                        .HasColumnType("int");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int?>("PacienteId1")
                        .HasColumnType("int");

                    b.Property<string>("Prescricao")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("prescricao");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.HasIndex("MedicoId1");

                    b.HasIndex("PacienteId");

                    b.HasIndex("PacienteId1");

                    b.ToTable("HistoricoConsulta", (string)null);
                });

            modelBuilder.Entity("NewCard.Models.Medico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<int?>("EspecialidadeId")
                        .HasColumnType("int");

                    b.Property<int?>("EspecialidadeId1")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefone");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadeId");

                    b.HasIndex("EspecialidadeId1");

                    b.ToTable("Medico", (string)null);
                });

            modelBuilder.Entity("NewCard.Models.Mensagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataEnvio")
                        .HasColumnType("date")
                        .HasColumnName("data_envio");

                    b.Property<int?>("DestinatarioId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("HoraEnvio")
                        .HasColumnType("time")
                        .HasColumnName("hora_envio");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.HasIndex("DestinatarioId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Mensagem", (string)null);
                });

            modelBuilder.Entity("NewCard.Models.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("date")
                        .HasColumnName("data_nascimento");

                    b.Property<string>("Endereco")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("endereco");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefone");

                    b.HasKey("Id");

                    b.ToTable("Paciente", (string)null);
                });

            modelBuilder.Entity("NewCard.Models.Consulta", b =>
                {
                    b.HasOne("NewCard.Models.Medico", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoId")
                        .HasConstraintName("FK_Consulta_Medico");

                    b.HasOne("NewCard.Models.Medico", null)
                        .WithMany("Consulta")
                        .HasForeignKey("MedicoId1");

                    b.HasOne("NewCard.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .HasConstraintName("FK_Consulta_Paciente");

                    b.HasOne("NewCard.Models.Paciente", null)
                        .WithMany("Consulta")
                        .HasForeignKey("PacienteId1");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("NewCard.Models.HistoricoConsulta", b =>
                {
                    b.HasOne("NewCard.Models.Medico", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoId")
                        .HasConstraintName("FK_HistoricoConsulta_Medico");

                    b.HasOne("NewCard.Models.Medico", null)
                        .WithMany("HistoricoConsulta")
                        .HasForeignKey("MedicoId1");

                    b.HasOne("NewCard.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .HasConstraintName("FK_HistoricoConsulta_Paciente");

                    b.HasOne("NewCard.Models.Paciente", null)
                        .WithMany("HistoricoConsulta")
                        .HasForeignKey("PacienteId1");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("NewCard.Models.Medico", b =>
                {
                    b.HasOne("NewCard.Models.Especialidade", "Especialidade")
                        .WithMany()
                        .HasForeignKey("EspecialidadeId")
                        .HasConstraintName("FK_Medico_Especialidade");

                    b.HasOne("NewCard.Models.Especialidade", null)
                        .WithMany("Medicos")
                        .HasForeignKey("EspecialidadeId1");

                    b.Navigation("Especialidade");
                });

            modelBuilder.Entity("NewCard.Models.Mensagem", b =>
                {
                    b.HasOne("NewCard.Models.Paciente", "Destinatario")
                        .WithMany()
                        .HasForeignKey("DestinatarioId")
                        .HasConstraintName("FK_Mensagem_Paciente");

                    b.HasOne("NewCard.Models.Paciente", null)
                        .WithMany("Mensagems")
                        .HasForeignKey("PacienteId");

                    b.Navigation("Destinatario");
                });

            modelBuilder.Entity("NewCard.Models.Especialidade", b =>
                {
                    b.Navigation("Medicos");
                });

            modelBuilder.Entity("NewCard.Models.Medico", b =>
                {
                    b.Navigation("Consulta");

                    b.Navigation("HistoricoConsulta");
                });

            modelBuilder.Entity("NewCard.Models.Paciente", b =>
                {
                    b.Navigation("Consulta");

                    b.Navigation("HistoricoConsulta");

                    b.Navigation("Mensagems");
                });
#pragma warning restore 612, 618
        }
    }
}
